@media (min-width:992px){.nav__box-links{flex-direction:row;justify-content:stretch;align-items:center;position:relative;top:auto;left:auto;width:-moz-max-content;width:max-content;min-width:auto;max-width:none;min-height:auto;max-height:none;background:none}.nav__link{position:relative;margin:0 0 0 .5em;font-size:1.9rem;padding:1em;font-weight:700}.nav__link:hover:before{width:100%}.nav__link:before{content:"";position:absolute;bottom:0;left:0;width:0;height:3px;background-color:#fff;transition:width .3s}.nav__burger-btn{display:none}.header__bg-img{width:50%;left:50%}.header__heading{font-size:5rem}.header__btn{font-size:3rem}.upcoming-course__icon--one{width:16rem}.upcoming-course__icon--two{width:12rem}.upcoming-course__heading{font-size:3.2rem}.upcoming-course__date{font-size:2.7rem}.upcoming-course__call{font-size:2.5rem}.contact__icon--one{top:20%;left:35%;width:17rem}.contact__icon--two{top:51%}.contact__icon--three{top:85%;left:30%}.contact__container{display:grid;grid-template-columns:1fr 1fr;gap:10em 7em}.contact__section-heading{grid-column:1/3;margin:0}.contact__map-box{width:100%;height:100%;margin:0}.contact__map{height:100%}.contact__form{margin:0}.pricing__card-extra-hour{width:86%;margin:6em auto}.contact__popup{width:77rem}}@media (min-width:1014px){.pricing__icon--one{left:60%;width:12rem}.pricing__icon--three{top:77%}}
/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
